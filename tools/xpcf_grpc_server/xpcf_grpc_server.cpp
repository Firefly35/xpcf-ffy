// Copyright (C) 2017-2019 Jonathan Müller <jonathanmueller.dev@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level directory of this distribution.

#include <iostream>

#include <cxxopts.hpp>

#include <xpcf/api/IComponentManager.h>
#include <xpcf/core/helpers.h>
#include "GrpcServerManager.h"

namespace xpcf = org::bcom::xpcf;

// print help options
void print_help(const cxxopts::Options& options)
{
    std::cout << options.help({"", "compilation"}) << '\n';
}

// print error message
void print_error(const std::string& msg)
{
    std::cerr << msg << '\n';
}

int main(int argc, char* argv[])
{
    SRef<xpcf::IComponentManager> cmpMgr = xpcf::getComponentManagerInstance();
    cmpMgr->bindLocal<xpcf::IGrpcServerManager,xpcf::GrpcServerManager>();
    //cmpMgr->bindLocal<IRPCGenerator,GRPCFlatBufferGenerator>();

    auto serverMgr = cmpMgr->resolve<xpcf::IGrpcServerManager>();

    serverMgr->bindTo<xpcf::IConfigurable>()->getProperty("server_address")->setStringValue("0.0.0.0");
    // missing configure methods for in code configuration !!!! -> need to call explicitly onConfigured : bad pattern here
    serverMgr->bindTo<xpcf::IConfigurable>()->onConfigured();

    cxxopts::Options option_list("xpcf_grpc_server",
                                 "xpcf_grpc_server - The commandline interface to the xpcf grpc server application.\n");
    // clang-format off
    option_list.add_options()
            ("h,help", "display this help and exit")
            ("version", "display version information and exit")
            ("v,verbose", "be verbose when parsing")
            ("fatal_errors", "abort program when a parser error occurs, instead of doing error correction")
            ("file", "the file that is being parsed",
             cxxopts::value<std::string>());
    option_list.add_options("compilation")
            ("database_dir", "set the directory where a 'compile_commands.json' file is located containing build information",
             cxxopts::value<std::string>())
            ("database_file", "set the file name whose configuration will be used regardless of the current file name",
             cxxopts::value<std::string>())
            ("I,include_directory", "add directory to include search path",
             cxxopts::value<std::vector<std::string>>())
            ("D,macro_definition", "define a macro on the command line",
             cxxopts::value<std::vector<std::string>>())
            ("U,macro_undefinition", "undefine a macro on the command line",
             cxxopts::value<std::vector<std::string>>())
            ("f,feature", "enable a custom feature (-fXX flag)",
             cxxopts::value<std::vector<std::string>>())
            ("gnu_extensions", "enable GNU extensions (equivalent to -std=gnu++XX)")
            ("msvc_extensions", "enable MSVC extensions (equivalent to -fms-extensions)")
            ("msvc_compatibility", "enable MSVC compatibility (equivalent to -fms-compatibility)")
            ("fast_preprocessing", "enable fast preprocessing, be careful, this breaks if you e.g. redefine macros in the same file!")
            ("remove_comments_in_macro", "whether or not comments generated by macro are kept, enable if you run into errors");
    // clang-format on

    auto options = option_list.parse(argc, argv);
    if (options.count("help"))
        print_help(option_list);
    else if (options.count("version"))
    {
        std::cout << "cppast version MYVERSION \n";
        std::cout << "Copyright (C) Jonathan Müller 2017-2019 <jonathanmueller.dev@gmail.com>\n";
        std::cout << '\n';
        std::cout << "Using libclang version  \n";
    }
    else if (!options.count("file") || options["file"].as<std::string>().empty()) {
        if (options.count("database_dir") && !options["database_dir"].as<std::string>().empty()) {
            std::cout<<"File argument is missing : parsing every file listed in database"<<std::endl;       
        }
        else {
            print_error("missing one of file or database dir argument");
            return 1;
        }
    }
    return 0;
}
